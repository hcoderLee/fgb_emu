// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to gameboy native library
class NativeBinding {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeBinding(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeBinding.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<Emulator_C> create_emulator(
    ffi.Pointer<WindowConfig> win_config,
  ) {
    return _create_emulator(
      win_config,
    );
  }

  late final _create_emulatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Emulator_C> Function(
              ffi.Pointer<WindowConfig>)>>('create_emulator');
  late final _create_emulator = _create_emulatorPtr.asFunction<
      ffi.Pointer<Emulator_C> Function(ffi.Pointer<WindowConfig>)>();

  void run_emulator(
    ffi.Pointer<Emulator_C> emulator,
    ffi.Pointer<ffi.Char> rom_path,
    ffi.Pointer<ffi.Char> save_path,
  ) {
    return _run_emulator(
      emulator,
      rom_path,
      save_path,
    );
  }

  late final _run_emulatorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Emulator_C>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('run_emulator');
  late final _run_emulator = _run_emulatorPtr.asFunction<
      void Function(ffi.Pointer<Emulator_C>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Uint32> get_window_buffer(
    ffi.Pointer<Emulator_C> emulator,
  ) {
    return _get_window_buffer(
      emulator,
    );
  }

  late final _get_window_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Uint32> Function(
              ffi.Pointer<Emulator_C>)>>('get_window_buffer');
  late final _get_window_buffer = _get_window_bufferPtr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Pointer<Emulator_C>)>();

  void press_button(
    ffi.Pointer<Emulator_C> emulator,
    int btn,
  ) {
    return _press_button(
      emulator,
      btn,
    );
  }

  late final _press_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Emulator_C>, ffi.Int32)>>('press_button');
  late final _press_button = _press_buttonPtr
      .asFunction<void Function(ffi.Pointer<Emulator_C>, int)>();

  void release_button(
    ffi.Pointer<Emulator_C> emulator,
    int btn,
  ) {
    return _release_button(
      emulator,
      btn,
    );
  }

  late final _release_buttonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Emulator_C>, ffi.Int32)>>('release_button');
  late final _release_button = _release_buttonPtr
      .asFunction<void Function(ffi.Pointer<Emulator_C>, int)>();

  void pause_emulator(
    ffi.Pointer<Emulator_C> emulator,
  ) {
    return _pause_emulator(
      emulator,
    );
  }

  late final _pause_emulatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Emulator_C>)>>(
          'pause_emulator');
  late final _pause_emulator =
      _pause_emulatorPtr.asFunction<void Function(ffi.Pointer<Emulator_C>)>();

  void resume_emulator(
    ffi.Pointer<Emulator_C> emulator,
  ) {
    return _resume_emulator(
      emulator,
    );
  }

  late final _resume_emulatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Emulator_C>)>>(
          'resume_emulator');
  late final _resume_emulator =
      _resume_emulatorPtr.asFunction<void Function(ffi.Pointer<Emulator_C>)>();

  void exit_emulator(
    ffi.Pointer<Emulator_C> emulator,
  ) {
    return _exit_emulator(
      emulator,
    );
  }

  late final _exit_emulatorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Emulator_C>)>>(
          'exit_emulator');
  late final _exit_emulator =
      _exit_emulatorPtr.asFunction<void Function(ffi.Pointer<Emulator_C>)>();

  void init_logger(
    int port,
    ffi.Pointer<ffi.Void> post_c_object,
  ) {
    return _init_logger(
      port,
      post_c_object,
    );
  }

  late final _init_loggerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<ffi.Void>)>>('init_logger');
  late final _init_logger =
      _init_loggerPtr.asFunction<void Function(int, ffi.Pointer<ffi.Void>)>();
}

class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

class Emulator extends ffi.Opaque {}

abstract class GbBtn {
  static const int LEFT = 1;
  static const int UP = 2;
  static const int RIGHT = 4;
  static const int DOWN = 8;
  static const int A = 16;
  static const int B = 32;
  static const int START = 64;
  static const int SELECT = 128;
}

class WindowConfig extends ffi.Struct {
  @ffi.Float()
  external double scale_factor;
}

typedef Emulator_C = Emulator;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;
